#!/usr/bin/env bash
# with-packages direnv niv diffutils nix-wrapped nr coreutils
set -e

name=nle
[[ -e .disable-$name ]] && exit

nixexpr="(import CFG_STORE_PATH).nle { path = ./.; }"
fallbackcache=$HOME/.cache
cachebase=${XDG_CACHE_HOME:-$fallbackcache}/$name
impuredir=$cachebase/.impure

args=$@
cmd=
[[ -n $1 && $1 != -d ]] && cmd=$1 && shift
[[ $1 = -d ]] && shift && cd "$1" && shift
sourcedir=$PWD

invalid() {
  echo invalid command: "$args"
  exit 1
}

[[ $cmd != run && -n $1 ]] && invalid

buildfiles=(
  package{,-lock}.json
  yarn.lock npm-{package,deps}.nix .disable-nle-yarn .npmrc
  Gemfile{,.lock}
  gemset.nix
  requirements{,.dev}.txt
  local.nix
  bin
)

hashfiles() {
  for file in "$@";do
    echo "$file"
  done | sort | xargs cat | md5sum | awk '{ print $1 }'
}

hashbuildfiles() {
  for file in "${buildfiles[@]}";do
    if [[ -e $sourcedir/$file ]];then
      if [[ -d $sourcedir/$file ]];then
        find "$sourcedir/$file" -type f
      else
        echo "$sourcedir/$file"
      fi
    fi
  done
}

hashcontent() {
  hashbuildfiles | sort | xargs cat
  echo NIX_LOCAL_ENV_HASH
  [[ -e .disable-nle-yarn ]] && echo disable-yarn-env
}

impure() {
  local deps out impurefile file
  deps=$1 && shift
  out=$1 && shift
  for file in $deps;do
    [[ -e $file ]] || return 0
  done
  [[ -e $impuredir ]] || mkdir -p "$impuredir"
  impurefile=$impuredir/$(hashfiles $deps)
  if [[ -e $impurefile ]];then
    cp "$impurefile" "$out"
  else
    "$@"
    cp "$out" "$impurefile"
  fi
}

cachedir=$cachebase/$(hashcontent | md5sum | awk '{ print $1 }')
builddir=$cachedir/build
result=$cachedir/result
sourcelink=$cachedir/source

if [[ -z $cmd ]];then
  "$0" cache
  exit $?
fi

envfiles='.env .env.development .development.env'

case $cmd in
  build)
    [[ -d $builddir ]] && cd "$builddir"
    nix build --impure --expr "$nixexpr" --out-link "$sourcedir"/result
    ;;
  rebuild)
    [[ -d $builddir ]] && cd "$builddir"
    nix build --impure --expr "$nixexpr" --out-link "$result"
    ;;
  activate)
    "$0" cache
    [[ -L node_modules ]] && unlink node_modules || true
    [[ -e package.json && -e yarn.lock && ! -e node_modules && ! -e .disable-nle-yarn ]] \
      && ln -sf "$result"/node_modules node_modules || true
    ;;
  init)
    "$0" activate
    [[ ! -e .envrc ]] && echo 'eval "$('$name' direnv)"' > .envrc
    direnv allow
    ;;
  re)
    "$0" cached | while read src;do
      set +e
      "$0" activate -d "$src"
      set -e
    done
    ;;
  recache)
    "$0" cached | while read src;do
      set +e
      "$0" cache -d "$src"
      set -e
    done
    ;;
  cached)
    if [[ -d "$cachebase" ]];then
      for dir in "$cachebase"/*;do
        src=$(< "$dir"/source)
        [[ -d $src ]] && echo "$src"
      done | sort | uniq
    fi
    ;;
  cache)
    [[ -e $result ]] && exit
    mkdir -p "$builddir"
    echo "$sourcedir" > "$sourcelink"
    for file in ${buildfiles[@]};do
      [[ -e $sourcedir/$file ]] && cp -rt "$builddir" "$sourcedir/$file"
    done
    "$0" generate -d "$builddir"
    "$0" rebuild
    ;;
  generate)
    impure "Gemfile Gemfile.lock" gemset.nix \
      nr bundix
    impure "package.json package-lock.json" node-packages.nix \
      nr nodePackages.node2nix -c /dev/null --pkgs-name nodejs_latest -l package-lock.json --no-copy-node-env
    if [[ -e package.json && -e yarn.lock && ! -e .disable-nle-yarn ]];then
      sed -i 's,git+ssh://git@,git+git@,' package.json yarn.lock
      grep '^  resolved "' yarn.lock | grep -v '#' | sed -e 's/[^"]*"//' -e 's/"$//' | while read url;do
        echo prefetching "$url"
        sha=$(nix-prefetch-url --name source.tgz --type sha1 "$url")
        sed -i "s^$url^$url#$sha^" yarn.lock
      done
      impure package.json npm-package.nix \
        sh -c 'nr yarn2nix --template > npm-package.nix'
      impure yarn.lock npm-deps.nix \
        sh -c 'nr yarn2nix > npm-deps.nix'
      if [[ -e .npmrc ]];then
        token=$(sed -n 1s/.*:_authToken=//p .npmrc)
        sed -i '1s/ }:/, writeText, lib }:/' npm-deps.nix
        header="Authorization: Bearer $token"
        curlOpts='"-H @${writeText "headers.txt" "'"$header"'"}"'
        name='if lib.hasSuffix ".tgz" url then "" else "source.tgz"'
        sed -i '/fetchurl {$/s/{$/'"rec { curlOpts = $curlOpts; name = $name;/" npm-deps.nix
        unpackPackage='tar xzvf $src; chmod +x package; mv package/* .; rmdir package'
        unpackPhase='if key == "char-regex" then "'"$unpackPackage"'" else null'
        sed -i "s:src = fetchurl:unpackPhase = $unpackPhase; "'\0:' npm-deps.nix
      fi
    fi
    ;;
  update)
    nr nle.scripts.update
    if [[ -e Gemfile && -e Gemfile.lock ]];then
      if ! nr bundler outdated;then
        if [[ -e gemset.nix ]];then
          hasgemset=1
        else
          hasgemset=
        fi
        rm Gemfile.lock
        nr bundix -l
        [[ -n $hasgemset ]] && rm gemset.nix
      fi
    fi
    if [[ -e nix/sources.nix && -e nix/sources.json ]];then
      tmpfile=$(mktemp)
      cp nix/sources.json $tmpfile
      niv update
      diff -u nix/sources.json $tmpfile || true
      rm -f $tmpfile
    fi
    [[ -x update-helper ]] && ./update-helper
    ;;
  run)
    "$0" cache
    set -a
    PATH=$result/bin:$PATH
    for file in $envfiles;do
      [[ -e $file ]] && source "$file"
    done
    set +a
    "$@"
    ;;
  direnv)
    "$0" activate 1>&2
    echo '[[ -z $IN_NIX_SHELL ]] && source_up'
    echo PATH_add "$result/bin"
    echo export IN_NIX_SHELL=impure
    echo watch_file "${buildfiles[@]}"
    for file in $envfiles;do
      [[ -e $file ]] && printf 'dotenv %s\n' "$file"
    done
    ;;
  uncache)
    for dir in $cachebase/*;do
      [[ $sourcedir = $(< "$dir/source") ]] && rm -rf "$dir"
    done
    ;;
  clean)
    rm -rf "$cachebase"
    ;;
  gc)
    if [[ -d "$cachebase" ]];then
      for dir in "$cachebase"/*;do
        newdir=$(< "$dir"/source)
        if [[ -d $newdir ]];then
          [[ $("$0" cachedir -d "$newdir") != $dir ]] && rm -rf "$dir"
        else
          rm -rf "$dir"
        fi
      done
    fi
    ;;
  cachedir)
    echo "$cachedir"
    ;;
  upgrade-nle)
    nix-env --tarball-ttl 0 -f https://github.com/kwbauson/cfg/tarball/main -iA nle
    ;;
  pin)
    nr nle.scripts.pin
    ;;
  *)
    invalid
    ;;
esac

exit 0
